# Generated by Django 5.0.1 on 2024-03-20 04:19

import django.core.validators
import django.db.models.deletion
import django_countries.fields
import localflavor.us.models
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BuildingDetails',
            fields=[
                ('building_number', models.CharField(help_text='Enter the Building Number. It must be a valid integer with at least two digits.', max_length=20, primary_key=True, serialize=False, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.RegexValidator(code='invalid_building_number', message='Building number must be a valid integer with at least two digits.', regex='^[1-9][0-9]*$')])),
                ('street_name', models.CharField(help_text='Enter the Street Name', max_length=100)),
                ('city', models.CharField(help_text='Enter Current City', max_length=25)),
                ('state', localflavor.us.models.USStateField(help_text='Please select your State', max_length=2)),
                ('country', django_countries.fields.CountryField(help_text='Please select your Country', max_length=2)),
                ('zip_code', localflavor.us.models.USZipCodeField(help_text='Enter your ZIP code in the format XXXXX or XXXXX-XXXX.', max_length=10, validators=[django.core.validators.RegexValidator(message='Enter a valid ZIP code in the format XXXXX or XXXXX-XXXX.', regex='^\\d{5}(?:-\\d{4})?$')])),
                ('no_of_floors', models.PositiveIntegerField(help_text='Enter the Number of Floors')),
                ('is_constructed', models.BooleanField(default=False, help_text='Choose True if building constructed')),
            ],
        ),
        migrations.CreateModel(
            name='ApartmentDetails',
            fields=[
                ('apartment_number', models.AutoField(help_text='Auto-incremented unique identifier for the apartment.', primary_key=True, serialize=False, unique=True)),
                ('is_available', models.BooleanField(default=True, help_text='Indicates whether the apartment is available for rent.')),
                ('dishwasher', models.BooleanField(default=False, help_text='Indicates whether the apartment has a dishwasher.')),
                ('microwave', models.BooleanField(default=False, help_text='Indicates whether the apartment has a microwave.')),
                ('carpet', models.BooleanField(default=False, help_text='Indicates whether the apartment has carpet flooring.')),
                ('refrigerator', models.BooleanField(default=False, help_text='Indicates whether the apartment has a refrigerator.')),
                ('air_condition', models.BooleanField(default=False, help_text='Indicates whether the apartment has a Air Conditioner.')),
                ('bedrooms', models.PositiveIntegerField(default=0, help_text='Number of bedrooms in the apartment.')),
                ('bathrooms', models.PositiveIntegerField(default=1, help_text='Number of bathrooms in the apartment.')),
                ('closets', models.PositiveIntegerField(default=1, help_text='Number of closets in the apartment.')),
                ('floor', models.PositiveIntegerField(default=1, help_text='Floor number of the apartment.')),
                ('no_of_occupants', models.PositiveIntegerField(default=1, help_text='Number of occupants allowed in the apartment.')),
                ('stove', models.CharField(choices=[('Electric', 'Electric'), ('Gas', 'Gas')], help_text='Type of stove in the apartment.', max_length=10)),
                ('laundry', models.CharField(choices=[('in_unit', 'In Unit'), ('floor', 'Floor'), ('building', 'Building'), ('not_available', 'Not Available')], help_text='Location of laundry facilities in or near the apartment.', max_length=13)),
                ('building_number', models.ForeignKey(help_text='The building in which the apartment is located.', on_delete=django.db.models.deletion.CASCADE, related_name='apartments', to='api.buildingdetails')),
            ],
        ),
    ]
